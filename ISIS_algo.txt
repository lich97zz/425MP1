a node {node_i} send multicast(req_pack_str):
	req_pack_str := <type> | <node_name> | <time> | <priority> | <info>
	eg. 0|node1|1633441054.6307683|1.1|DEPOSIT wqkby 10
	type=0 sending a request in ISIS algorithm
	type=1 respond to a request
	type=2 the priority is agreed, please update priority

	parse the req_pack_str, parse_str = <node_name> | <time>| <info>
	msg_replied[parse_str] = [False,False,False...] //all nodes in name_list
	priority_suffix = int(self_node_name[-1])
	proposed_priority = sequence_num+0.1*priority_suffix

	parse_str_map[parse_str] = [proposed_priority, "undelivered"]
	pending_msg.append([proposed_priority, "undelivered", parse_str ])
	sort(pending_msg)
	for front "delivered":
		append to delivered_msg list
	sequence_num += 1

init for each node:
    parse_str_map = dict()
    sequence_num = 0
    pending_msg = [] //the queue
    msg_replied = dict()

on receiving a message:
    if type==1:
		sender_id = name_list.index(node_name)
		msg_replied[parse_str][sender_id] = True
		new_priority = max(priority, parse_str_map[parse_str][0]]
		original_priority = parse_str_map[parse_str][0]
		
		in pending_msg, find elm[0] = original_priority, change elm[0] = new_priority
		sort(pending_msg)
		for front "delivered":
			append to delivered_msg list

		if False not in msg_replied[parse_str]:
			parse_str_map[parse_str][1] = "delivered"
			organize_pack_str =  2 | <node_name> | <time> | <priority> | <info>
			multicast(organize_pack_str)
			diff_time = current_time - <time>

	               
    
    parse the req_pack_str, parse_str = <node_name> | <time>| <info>
    
    if type==0: //need to respond to a ISIS request, report a proposed priority
		priority_suffix = int(self_node_name[-1])
		proposed_priority = sequence_num+0.1*priority_suffix
 
		parse_str_map[parse_str] = [proposed_priority, "undelivered"]
		pending_msg.append([proposed_priority, "undelivered", parse_str ])
		sort(pending_msg)
		for front "delivered":
			append to delivered_msg list
		sequence_num += 1
        send_back_str = 1 | <self_node_name> | <time> | <proposed_priority> | <info>
		unicast back to sender()
    if type==2:
		original_priority = parse_str_map[parse_str][0]
		parse_str_map[parse_str] = [final_priority, "delivered"]
		in pending_msg, find elm[0] = original_priority, change elm = (final_priority, "delivered", [parse_str]) 	
		sort(pending_msg)
		for front "delivered":
			append to delivered_msg list
